{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.47.5",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@rbxts/rlog!",
  "docComment": "/**\n * Metadata based logging framework for ROBLOX projects.\n *\n * @remarks\n *\n * `rlog` exports the {@link RLog} class as the primary entry point.\n *\n * @packageDocumentation\n */\n",
  "name": "@rbxts/rlog",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@rbxts/rlog!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!ContextCallback:type",
          "docComment": "/**\n * A callback that take in a {@link LogContext} and optionally returns a value.\n *\n * @see\n *\n * {@link withLogContext:(callback)}, {@link withLogContextAsync}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ContextCallback<R = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(context: "
            },
            {
              "kind": "Reference",
              "text": "LogContext",
              "canonicalReference": "@rbxts/rlog!LogContext:class"
            },
            {
              "kind": "Content",
              "text": ") => R"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/util.ts",
          "releaseTag": "Public",
          "name": "ContextCallback",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!fileTagEnricher:function(1)",
          "docComment": "/**\n * Enricher for adding a tag to a log matching the file path, if absent.\n *\n * If the entry doesn't have a tag, then this enricher will use the {@link SourceMetadata.file_path | file_path} of where log occurred instead.\n *\n * @example\n * ```ts\n * const logger = new RLog({ enrichers: [fileTagEnricher] });\n * logger.i(\"Hello world!\");\n * // > [INFO]: ReplicatedStorage.TS.main -> Hello world!\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fileTagEnricher(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/enrichers/file-tag-enricher.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entry",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "fileTagEnricher"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!FormatMethodCallback:type",
          "docComment": "/**\n * Type representing a callback function for converting log entries to output.\n *\n * @param entry - The log entry to convert.\n *\n * @returns A tuple of arguments to output in the entry's place\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FormatMethodCallback = "
            },
            {
              "kind": "Content",
              "text": "(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "LuaTuple",
              "canonicalReference": "!LuaTuple:type"
            },
            {
              "kind": "Content",
              "text": "<unknown[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/sinks/roblox-console-sink.ts",
          "releaseTag": "Public",
          "name": "FormatMethodCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!functionTagEnricher:function(1)",
          "docComment": "/**\n * Enricher for adding a tag to a log matching the function name, if absent.\n *\n * If the entry doesn't have a tag, then this enricher will use the {@link SourceMetadata.nearest_function_name | nearest_function_name} of where log occurred instead.\n *\n * @example\n * ```ts\n * const logger = new RLog({ enrichers: [functionTagEnricher] });\n *\n * function CoolFunction() {\n *  logger.i(\"Hello world!\");\n * }\n *\n * CoolFunction();\n * // > [INFO]: CoolFunction -> Hello world!\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function functionTagEnricher(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/enrichers/function-tag-enricher.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entry",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "functionTagEnricher"
        },
        {
          "kind": "Class",
          "canonicalReference": "@rbxts/rlog!LogContext:class",
          "docComment": "/**\n * Context for a collection of log entries.\n *\n * Provides a centrialized means for tracking correlation ids, allowing you to create a linkage between log entries in individual logic flows- enabling more streamlined debugging in high traffic or asynchronous environments.\n *\n * @see\n *\n * {@link LogContext.start | start}, {@link RLog.ForceContextFlush | ForceContextFlush}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LogContext "
            }
          ],
          "fileUrlPath": "src/context/log-context.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "LogContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rbxts/rlog!LogContext:constructor(1)",
              "docComment": "/**\n * Constructor for manually creating a {@link LogContext}.\n *\n * @param correlation_id - Tracking identifier attached to all logs that use this context.\n *\n * @param config - Common configuration shared between all consumers of this context.\n *\n * @see\n *\n * {@link LogContext.start | start}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(correlation_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", config: "
                },
                {
                  "kind": "Reference",
                  "text": "RLogConfig",
                  "canonicalReference": "@rbxts/rlog!RLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "correlation_id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rbxts/rlog!LogContext#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly config: "
                },
                {
                  "kind": "Reference",
                  "text": "RLogConfig",
                  "canonicalReference": "@rbxts/rlog!RLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rbxts/rlog!LogContext#correlation_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly correlation_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "correlation_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!LogContext#IsDead:member(1)",
              "docComment": "/**\n * A context is considered dead after {@link LogContext.stop | stop} has been called.\n *\n * A dead context should not be used anymore, and can not be re-started.\n *\n * @returns boolean indicating whether this context is usable or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsDead(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "IsDead"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!LogContext.start:member(1)",
              "docComment": "/**\n * Creates a new {@link LogContext}.\n *\n * The context can be used to create {@link RLog} instances by calling {@link LogContext.use | use}.\n *\n * When you're done with the context, make sure to call {@link LogContext.stop | stop} to prevent memory leaks.\n *\n * @param config - Optional config to use for the context. {@link RLog} instances that use this context will merge their configs with the config of the context.\n *\n * @returns A new {@link LogContext} instance.\n *\n * @example\n * ```ts\n * function GiveMoney(context: LogContext, player: Player, money: number) {\n *   // ...\n * }\n *\n * remotes.giveMoney.connect((player: Player, money: number) => {\n *   const context = LogContext.start();\n *\n *   GiveMoney(context, player, money);\n *\n *   context.stop();\n * });\n * ```\n *\n * @see\n *\n * {@link withLogContext}, {@link RLogConfig.correlationGenerator | correlationGenerator}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static start(config?: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "LogContext",
                  "canonicalReference": "@rbxts/rlog!LogContext:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!LogContext#stop:member(1)",
              "docComment": "/**\n * Marks this context as dead, preventing any further usage.\n *\n * Will make calls to the context manager to ensure there are no memory leaks.\n *\n * Can safely be called multiple times, calling stop on an already dead instance will _not_ throw an error.\n *\n * @example\n * ```ts\n * function GiveMoney(context: LogContext, player: Player, money: number) {\n *   // ...\n * }\n *\n * remotes.giveMoney.connect((player: Player, money: number) => {\n *   const context = LogContext.start();\n *\n *   GiveMoney(context, player, money);\n *\n *   context.stop();\n * });\n * ```\n *\n * @see\n *\n * {@link RLogConfig.contextBypass | contextBypass}, {@link RLogConfig.suspendContext | suspendContext}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "stop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!LogContext#use:member(1)",
              "docComment": "/**\n * Creates a new {@link RLog} instance that inherits this context.\n *\n * All {@link RLog} instances that use the same {@link LogContext} will have the same `correlation_id` attached to their messages.\n *\n * @param config - Optional config to merge with this context and the new instance.\n *\n * @returns A new {@link RLog} instance.\n *\n * @throws\n *\n * If the context is dead (ie; if {@link LogContext.stop | stop} was called already)\n *\n * @example\n * ```ts\n * const context = LogContext.start();\n *\n * const logger = context.use({ tag: \"Main\" });\n *\n * logger.i(\"Hello world!\");\n *\n * context.stop();\n * // > [INFO]: Main -> Hello world!\n * // > { correlation_id: \"sITjsHD89b\" }\n * ```\n *\n * @see\n *\n * {@link LogContext.stop | stop}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "use(config?: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "use"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!LogContext#withConfig:member(1)",
              "docComment": "/**\n * Creates a new {@link LogContext} instance that inherits this context.\n *\n * The correlation id will be the same, but the config will be merged with the provided config.\n *\n * Can be used to create slightly different versions of the same context.\n *\n * @param config - Config to merge with this context.\n *\n * @returns A new {@link LogContext} instance.\n *\n * @throws\n *\n * If the context is dead (ie; if {@link LogContext.stop | stop} was called already)\n *\n * @example\n * ```ts\n * const mainContext = LogContext.start({ minLogLevel: LogLevel.DEBUG });\n *\n * // inherits the `minLogLevel`\n * const secondaryContext = mainContext.withConfig({ contextBypass: true });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withConfig(config: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "LogContext",
                  "canonicalReference": "@rbxts/rlog!LogContext:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "withConfig"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!LogData:type",
          "docComment": "/**\n * Type representing the additional data associated with a log entry.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogData = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/common/index.ts",
          "releaseTag": "Public",
          "name": "LogData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!LogEnricherCallback:type",
          "docComment": "/**\n * Type representing a callback function for enriching log entries, or an \"enricher\".\n *\n * Enrichers optionally mutate {@link LogEntry}s. You can add data to a {@link LogEntry}, edit its {@link LogEntry.source_metadata | metadata}, or just return it if you don't need to do anything.\n *\n * @param entry - The log entry to enrich.\n *\n * @returns The enriched log entry.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogEnricherCallback = "
            },
            {
              "kind": "Content",
              "text": "(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/common/index.ts",
          "releaseTag": "Public",
          "name": "LogEnricherCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!LogEntry:type",
          "docComment": "/**\n * A single logging event.\n *\n * Each message has its own instance of this, with relevant data attached.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogEntry = "
            },
            {
              "kind": "Content",
              "text": "{\n    level: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@rbxts/rlog!LogLevel:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    message: string;\n    data: "
            },
            {
              "kind": "Reference",
              "text": "LogData",
              "canonicalReference": "@rbxts/rlog!LogData:type"
            },
            {
              "kind": "Content",
              "text": ";\n    encoded_data: "
            },
            {
              "kind": "Reference",
              "text": "LogData",
              "canonicalReference": "@rbxts/rlog!LogData:type"
            },
            {
              "kind": "Content",
              "text": ";\n    config: "
            },
            {
              "kind": "Reference",
              "text": "Writable",
              "canonicalReference": "!Writable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RLogConfig",
              "canonicalReference": "@rbxts/rlog!RLogConfig:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    context?: "
            },
            {
              "kind": "Reference",
              "text": "LogContext",
              "canonicalReference": "@rbxts/rlog!LogContext:class"
            },
            {
              "kind": "Content",
              "text": ";\n    timestamp: number;\n    source_metadata: "
            },
            {
              "kind": "Reference",
              "text": "SourceMetadata",
              "canonicalReference": "@rbxts/rlog!SourceMetadata:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/common/index.ts",
          "releaseTag": "Public",
          "name": "LogEntry",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rbxts/rlog!LogLevel:enum",
          "docComment": "/**\n * Enum representing the various log levels, or \"importance\" of a {@link LogEntry}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum LogLevel "
            }
          ],
          "fileUrlPath": "src/common/index.ts",
          "releaseTag": "Public",
          "name": "LogLevel",
          "preserveMemberOrder": true,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rbxts/rlog!LogLevel.VERBOSE:member",
              "docComment": "/**\n * The lowest level of logging.\n *\n * Verbose messages are those that are not usually useful unless you need to see deep step-by-step processes in your application.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "VERBOSE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "VERBOSE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rbxts/rlog!LogLevel.DEBUG:member",
              "docComment": "/**\n * The second lowest level of logging.\n *\n * Generally used for messages that you don't necessarily need to see at runtime, but they're useful when you need to find out why something is happening.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DEBUG = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DEBUG"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rbxts/rlog!LogLevel.INFO:member",
              "docComment": "/**\n * The baseline level of logging.\n *\n * Useful for messages that signify an event or interaction. Usually occur only once or twice in a control flow, and are used less for debugging, and more for seeing what's going on in your application.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "INFO = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "INFO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rbxts/rlog!LogLevel.WARNING:member",
              "docComment": "/**\n * Not as bad as an {@link LogLevel.ERROR | ERROR}, but something that you should be looked at.\n *\n * Useful for situations where something isn't necessarily breaking, but it's behaving in a way that isn't desired.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WARNING = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "WARNING"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rbxts/rlog!LogLevel.ERROR:member",
              "docComment": "/**\n * The highest level of logging.\n *\n * Used to indicate issues or exceptions that broke the application, and need to be fixed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERROR = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ERROR"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!LogSinkCallback:type",
          "docComment": "/**\n * Type representing a callback function for consuming log entries, or a \"sink\".\n *\n * Sinks optionally consume {@link LogEntry}s. If you return `true`, then the log will be stopped, and no further sinks will be called. The {@link LogEntry} will also not be logged to the console.\n *\n * Sinks are generally used to send logs to an external database or service, but they can also be used to filter logs by \"consuming\" them.\n *\n * **Note:** you should not yield in sinks. If you're sending data to an external service, do so via queue that gets dispatched in a different thread.\n *\n * @param entry - The log entry to handle.\n *\n * @returns `true` if the log was consume, `false` or `void` otherwise.\n *\n * @example\n * ```ts\n * const logger = new rLog({\n * sinks: [\n *   (entry) => {\n *      someExternalDBFunction(entry);\n *   },\n *   (entry) => {\n *     return true;\n *   },\n *   (entry) => {\n *     // never reaches because the previous sink returned true\n *     error(\"Messages should not log to the console\");\n *   },\n * ],\n * });\n *\n * logger.i(\"Hello world!\");\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogSinkCallback = "
            },
            {
              "kind": "Content",
              "text": "(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean | void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/common/index.ts",
          "releaseTag": "Public",
          "name": "LogSinkCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!OutputMethodCallback:type",
          "docComment": "/**\n * Type representing a callback function for sending a log to the roblox console.\n *\n * @param entry - The entry from where this log came from.\n *\n * @param messages - A tuple of arguments to output in the entry's place.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OutputMethodCallback = "
            },
            {
              "kind": "Content",
              "text": "(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ", messages: "
            },
            {
              "kind": "Reference",
              "text": "LuaTuple",
              "canonicalReference": "!LuaTuple:type"
            },
            {
              "kind": "Content",
              "text": "<unknown[]>) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/sinks/roblox-console-sink.ts",
          "releaseTag": "Public",
          "name": "OutputMethodCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type",
          "docComment": "/**\n * Version of {@link RLogConfig} that allows all data to be absent.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PartialRLogConfig = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExcludeMembers",
              "canonicalReference": "!ExcludeMembers:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RLogConfig",
              "canonicalReference": "@rbxts/rlog!RLogConfig:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SerializationConfig",
              "canonicalReference": "@rbxts/rlog!SerializationConfig:type"
            },
            {
              "kind": "Content",
              "text": ">> & {\n    readonly serialization?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SerializationConfig",
              "canonicalReference": "@rbxts/rlog!SerializationConfig:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/configuration/index.ts",
          "releaseTag": "Public",
          "name": "PartialRLogConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rbxts/rlog!RLog:class",
          "docComment": "/**\n * Class for Server-Side Roblox Logging.\n *\n * You can also use {@link rlog} or {@link rLog}- for style purposes.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RLog "
            }
          ],
          "fileUrlPath": "src/rlog.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RLog",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rbxts/rlog!RLog:constructor(1)",
              "docComment": "/**\n * Constructs a new {@link RLog} instance.\n *\n * @param config - Configuration settings to use for this logger instance.\n *\n * @param context - The {@link LogContext} to use as a base for this instance.\n *\n * @param inheritDefault - Whether to merge configs with the {@link RLog.default | default instance}. Defaults to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(config?: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ", context?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogContext",
                  "canonicalReference": "@rbxts/rlog!LogContext:class"
                },
                {
                  "kind": "Content",
                  "text": ", inheritDefault?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "inheritDefault",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@rbxts/rlog!RLog:constructor(2)",
              "docComment": "/**\n * Constructs a new {@link RLog} instance.\n *\n * Uses the provided table in place of the argument names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ config, context, inheritDefault }: "
                },
                {
                  "kind": "Reference",
                  "text": "RLogConstructorParameters",
                  "canonicalReference": "@rbxts/rlog!RLogConstructorParameters:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "{ config, context, inheritDefault }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#clone:member(1)",
              "docComment": "/**\n * Creates a new {@link RLog} instance with all the same settings and properties.\n *\n * Everything is deep copied, so any mutations to the original will safely not replicate.\n *\n * @returns A duplicate of this {@link RLog} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#clone:member(2)",
              "docComment": "/**\n * Creates a new {@link RLog} instance with all the same settings and properties.\n *\n * The provided {@link RLogConstructorParameters | parameters} will be merged with the existing parameters on this instance.\n *\n * Everything is deep copied, so any mutations to the original will safely not replicate.\n *\n * @returns A duplicate of this {@link RLog} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone({ config, context }: "
                },
                {
                  "kind": "Reference",
                  "text": "RLogConstructorParameters",
                  "canonicalReference": "@rbxts/rlog!RLogConstructorParameters:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "{ config, context }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "clone"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rbxts/rlog!RLog#context:member",
              "docComment": "/**\n * The {@link LogContext} assigned to this instance, if any.\n *\n * Log context provides a way to carry Correlation IDs through-out logs in an individual flow.\n *\n * To learn more about what that means, you can look at the docs for {@link LogContext}.\n *\n * @see\n *\n * {@link RLog.withLogContext | withLogContext}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly context: "
                },
                {
                  "kind": "Reference",
                  "text": "LogContext",
                  "canonicalReference": "@rbxts/rlog!LogContext:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#d:member(1)",
              "docComment": "/**\n * Shorthand version of {@link RLog.debug | debug}.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "d(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "d"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#debug:member(1)",
              "docComment": "/**\n * Logs a debug message.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n *\n * @example\n * ```log\n * [DEBUG]: Hello World!\n * { data: { player: \"Player1\" } }\n * ```\n *\n * @see\n *\n * {@link RLog.d | d}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "debug"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rbxts/rlog!RLog.default:member",
              "docComment": "/**\n * The default or \"global\" {@link RLog} instance.\n *\n * All loggers inherit from this, so it's a convenient way for attaching global sinks, enrichers, or configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly default: "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "default",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#e:member(1)",
              "docComment": "/**\n * Shorthand version of {@link RLog.error | error}.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "e(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "e"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#error:member(1)",
              "docComment": "/**\n * Logs an error message.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n *\n * @example\n * ```log\n * [ERROR]: Hello World!\n * { data: { player: \"Player1\" } }\n * ```\n *\n * @see\n *\n * {@link RLog.e | e}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "error"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog.ForceContextFlush:member(1)",
              "docComment": "/**\n * Force any pending messages to be sent through the sinks, regardless of the `minLogLevel`.\n *\n * Inteded to be called before the game closes, to ensure there are no missing logs.\n *\n * @example\n * ```ts\n * game.bindToClose(() => {\n *   RLog.ForceContextFlush();\n * });\n * ```\n *\n * @see\n *\n * {@link LogContext}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ForceContextFlush(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "ForceContextFlush"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#i:member(1)",
              "docComment": "/**\n * Shorthand version of {@link RLog.info | info}.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "i(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "i"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#info:member(1)",
              "docComment": "/**\n * Logs an informational message.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n *\n * @example\n * ```log\n * [INFO]: Hello World!\n * { data: { player: \"Player1\" } }\n * ```\n *\n * @see\n *\n * {@link RLog.i | i}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "info"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#log:member(1)",
              "docComment": "/**\n * Logs a message with a specified log level.\n *\n * @param level - The severity of the log.\n *\n * @param message - The core message of the log.\n *\n * @param data - Optional data to log. Will be encoded according to this logger's {@link RLogConfig | config}.\n *\n * @see\n *\n * {@link RLog.verbose | verbose}, {@link RLog.debug | debug}, {@link RLog.info | info}, {@link RLog.warning | warning}, {@link RLog.error | error}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(level: "
                },
                {
                  "kind": "Reference",
                  "text": "LogLevel",
                  "canonicalReference": "@rbxts/rlog!LogLevel:enum"
                },
                {
                  "kind": "Content",
                  "text": ", message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "log"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog.ResetDefaultConfig:member(1)",
              "docComment": "/**\n * Resets the config for the {@link RLog.default | default} instance to the original settings.\n *\n * Essentially would be the same as if you never touched the default config.\n *\n * @see\n *\n * {@link RLog.UpdateDefaultConfig | UpdateDefaultConfig}, {@link RLog.ResetDefaultConfig | SetDefaultConfig}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ResetDefaultConfig(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "ResetDefaultConfig"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog.SetDefaultConfig:member(1)",
              "docComment": "/**\n * Overwrites the config for the {@link RLog.default | default} instance.\n *\n * You will rarely need to use this, and generally will want to be using {@link RLog.UpdateDefaultConfig | UpdateDefaultConfig} insted.\n *\n * @param config - The {@link RLogConfig} to use.\n *\n * @see\n *\n * {@link RLog.UpdateDefaultConfig | UpdateDefaultConfig}, {@link RLog.ResetDefaultConfig | ResetDefaultConfig}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SetDefaultConfig(config: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "SetDefaultConfig"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog.UpdateDefaultConfig:member(1)",
              "docComment": "/**\n * Merges the given config with the existing config for the {@link RLog.default | default} instance.\n *\n * Since all {@link RLog} instances inherit their config from the default instance, this is a convenient way to provide default configuration settings.\n *\n * @param config - The {@link RLogConfig} to use.\n *\n * @example\n * ```ts\n * RLog.UpdateDefaultConfig({ serialization: { encodeFunctions: true } });\n *\n * // Inherits the `encodeFunctions` setting automatically\n * const logger = new RLog({ serialization: { encodeRobloxTypes: false } });\n *\n * logger.i(\"Player died\", { player: player, location: player.Position, revive: () => {} });\n * // > [INFO]: Player died\n * // > { \"data\": { \"player\": 1338, \"location\": \"<Vector3>\", \"revive\": \"<Function>\" } }\n * ```\n *\n * @see\n *\n * {@link RLog.UpdateDefaultConfig | SetDefaultConfig}, {@link RLog.ResetDefaultConfig | ResetDefaultConfig}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static UpdateDefaultConfig(config: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "UpdateDefaultConfig"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#v:member(1)",
              "docComment": "/**\n * Shorthand version of {@link RLog.verbose | verbose}.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "v(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "v"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#verbose:member(1)",
              "docComment": "/**\n * Logs a verbose message.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n *\n * @example\n * ```log\n * [VERBOSE]: Hello World!\n * { data: { player: \"Player1\" } }\n * ```\n *\n * @see\n *\n * {@link RLog.v | v}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verbose(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "verbose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#w:member(1)",
              "docComment": "/**\n * Shorthand version of {@link RLog.warning | warning}.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "w(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "w"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#warn:member(1)",
              "docComment": "/**\n * Shorthand version of {@link RLog.warning | warning}.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "warn"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#warning:member(1)",
              "docComment": "/**\n * Logs a warning message.\n *\n * @param message - The message to log.\n *\n * @param data - Optional data to log.\n *\n * @example\n * ```log\n * [WARNING]: Hello World!\n * { data: { player: \"Player1\" } }\n * ```\n *\n * @see\n *\n * {@link RLog.w | w}, {@link RLog.warn | warn}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warning(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogData",
                  "canonicalReference": "@rbxts/rlog!LogData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "warning"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#withConfig:member(1)",
              "docComment": "/**\n * Returns a new {@link RLog} with the provided config merged with the existing config.\n *\n * @param config - Configuration settings to apply to the new instance.\n *\n * @returns The new {@link RLog} instance\n *\n * @example\n * ```ts\n * let logger = new RLog({ minLogLevel: LogLevel.DEBUG });\n *\n * const data = { position: new Vector2(5, 10) };\n *\n * logger.v(\"Hello verbose!\", data);\n * logger.d(\"Hello debug!\", data);\n * // > [DEBUG]: Hello debug!\n * // > { data: { position: { X: 5, Y: 10 } } }\n *\n * // Inherits the minLogLevel\n * logger = logger.withConfig({ serialization: { encodeRobloxTypes: false } });\n *\n * logger.v(\"Hello verbose!\", data);\n * logger.d(\"Hello debug!\", data);\n * // > [DEBUG]: Hello debug!\n * // > { data: { position: \"<Vector2>\" } }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withConfig(config: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialRLogConfig",
                  "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "withConfig"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#withLogContext:member(1)",
              "docComment": "/**\n * Returns a new {@link RLog} with the {@link RLog.context | context} set to the provided context.\n *\n * @param context - The new context to use.\n *\n * @returns The new {@link RLog} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withLogContext(context: "
                },
                {
                  "kind": "Reference",
                  "text": "LogContext",
                  "canonicalReference": "@rbxts/rlog!LogContext:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "withLogContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#withMinLogLevel:member(1)",
              "docComment": "/**\n * Returns a new {@link RLog} with the {@link RLogConfig.minLogLevel | minLogLevel} set to the provided level.\n *\n * Messages below the minimum level will be ignored.\n *\n * You can also set this in the {@link RLogConfig | config}, this method is provided purely as a means for easier changing.\n *\n * @param minLevel - The {@link LogLevel} to allow logs for.\n *\n * @returns The new {@link RLog} instance\n *\n * @example\n * ```ts\n * let logger = new RLog();\n *\n * logger.v(\"Hello verbose!\");\n * logger.d(\"Hello debug!\");\n * // > [VERBOSE]: Hello verbose!\n * // > [DEBUG]: Hello debug!\n *\n * logger = logger.withMinLogLevel(LogLevel.DEBUG);\n *\n * logger.v(\"Hello verbose!\");\n * logger.d(\"Hello debug!\");\n * // > [DEBUG]: Hello debug!\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withMinLogLevel(minLevel: "
                },
                {
                  "kind": "Reference",
                  "text": "LogLevel",
                  "canonicalReference": "@rbxts/rlog!LogLevel:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "withMinLogLevel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rbxts/rlog!RLog#withTag:member(1)",
              "docComment": "/**\n * Returns a new {@link RLog} with the {@link RLogConfig.tag | tag} set to the provided string.\n *\n * Tags are appended to log messages when present, for easier filtering.\n *\n * Usually, they're used at the class or module level to keep track of all logs facilitated by a single service or action.\n *\n * @param tag - The new tag to use.\n *\n * @returns The new {@link RLog} instance.\n *\n * @example\n * ```ts\n * let logger = new RLog();\n *\n * logger.d(\"Hello world!\");\n * // > [DEBUG]: \"Hello world!\"\n *\n * logger = logger.withTag(\"main\");\n *\n * logger.d(\"Hello world!\");\n * // > [DEBUG]: main -> \"Hello world!\"\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withTag(tag: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RLog",
                  "canonicalReference": "@rbxts/rlog!RLog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tag",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "withTag"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rbxts/rlog!rlog:var",
          "docComment": "/**\n * Mapping to {@link RLog}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "rlog: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "RLog",
              "canonicalReference": "@rbxts/rlog!RLog:class"
            }
          ],
          "fileUrlPath": "src/rlog.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "rlog",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rbxts/rlog!rLog:var",
          "docComment": "/**\n * Mapping to {@link RLog}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "rLog: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "RLog",
              "canonicalReference": "@rbxts/rlog!RLog:class"
            }
          ],
          "fileUrlPath": "src/rlog.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "rLog",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!RLogConfig:type",
          "docComment": "/**\n * Configuration settings for {@link RLog}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RLogConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly minLogLevel: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@rbxts/rlog!LogLevel:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly serialization: "
            },
            {
              "kind": "Reference",
              "text": "SerializationConfig",
              "canonicalReference": "@rbxts/rlog!SerializationConfig:type"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly correlationGenerator?: () => string;\n    readonly tag?: string;\n    readonly sinks?: "
            },
            {
              "kind": "Reference",
              "text": "LogSinkCallback",
              "canonicalReference": "@rbxts/rlog!LogSinkCallback:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    readonly enrichers?: "
            },
            {
              "kind": "Reference",
              "text": "LogEnricherCallback",
              "canonicalReference": "@rbxts/rlog!LogEnricherCallback:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    readonly contextBypass: boolean;\n    readonly suspendContext: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/configuration/index.ts",
          "releaseTag": "Public",
          "name": "RLogConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!RLogConstructorParameters:type",
          "docComment": "/**\n * Table version of the constructor parameters for {@link RLog}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RLogConstructorParameters = "
            },
            {
              "kind": "Content",
              "text": "{\n    config?: "
            },
            {
              "kind": "Reference",
              "text": "PartialRLogConfig",
              "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
            },
            {
              "kind": "Content",
              "text": ";\n    context?: "
            },
            {
              "kind": "Reference",
              "text": "LogContext",
              "canonicalReference": "@rbxts/rlog!LogContext:class"
            },
            {
              "kind": "Content",
              "text": ";\n    inheritDefault?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/rlog.ts",
          "releaseTag": "Public",
          "name": "RLogConstructorParameters",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rbxts/rlog!rLogger:var",
          "docComment": "/**\n * Mapping to {@link RLog.default} for easier default usage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "rLogger: "
            },
            {
              "kind": "Reference",
              "text": "RLog",
              "canonicalReference": "@rbxts/rlog!RLog:class"
            }
          ],
          "fileUrlPath": "src/rlog.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "rLogger",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!robloxConsoleSink:function(1)",
          "docComment": "/**\n * The default sink for sending messages to the roblox console.\n *\n * By default, this is already applied at the root level through the default instance.\n *\n * @param param0 - Optional {@link RobloxConsoleSinkConfig} options for this sink.\n *\n * @returns A sink that should be added to a config.\n *\n * @example\n * ```ts\n * const logger = new rLog({\n *   sinks: [\n *      robloxConsoleSink({ formatMethod: myCustomMethod }),\n *   ],\n * });\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function robloxConsoleSink({ formatMethod, outputMethod, minLogLevel, disable }?: "
            },
            {
              "kind": "Reference",
              "text": "RobloxConsoleSinkConfig",
              "canonicalReference": "@rbxts/rlog!RobloxConsoleSinkConfig:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/sinks/roblox-console-sink.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ formatMethod, outputMethod, minLogLevel, disable }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "robloxConsoleSink"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!RobloxConsoleSinkConfig:type",
          "docComment": "/**\n * Configuration options for {@link robloxConsoleSink}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RobloxConsoleSinkConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly formatMethod?: "
            },
            {
              "kind": "Reference",
              "text": "FormatMethodCallback",
              "canonicalReference": "@rbxts/rlog!FormatMethodCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly outputMethod?: "
            },
            {
              "kind": "Reference",
              "text": "OutputMethodCallback",
              "canonicalReference": "@rbxts/rlog!OutputMethodCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly minLogLevel?: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@rbxts/rlog!LogLevel:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly disable?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/sinks/roblox-console-sink.ts",
          "releaseTag": "Public",
          "name": "RobloxConsoleSinkConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!SerializationConfig:type",
          "docComment": "/**\n * Configuration settings for serialization.\n *\n * @see\n *\n * {@link RLogConfig}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SerializationConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly encodeRobloxTypes: boolean;\n    readonly encodeFunctions: boolean;\n    readonly deepEncodeTables: boolean;\n    readonly encodeMethod: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/configuration/index.ts",
          "releaseTag": "Public",
          "name": "SerializationConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rbxts/rlog!SourceMetadata:type",
          "docComment": "/**\n * Metadata used in identifying _where_ in the source code a log occurred.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SourceMetadata = "
            },
            {
              "kind": "Content",
              "text": "{\n    function_name?: string;\n    nearest_function_name?: string;\n    file_path: string;\n    line_number: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/common/index.ts",
          "releaseTag": "Public",
          "name": "SourceMetadata",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!sourceMetadataEnricher:function(1)",
          "docComment": "/**\n * Attaches {@link LogEntry.source_metadata | source_metadata} to the output of a log entry.\n *\n * The metadata is attached under the `source_metadata` key in {@link LogEntry.encoded_data | encoded_data}.\n *\n * If a value is `undefined`, it will not be populated.\n *\n * @example\n * ```log\n * [INFO]: Actions -> Hello world!\n * {\n *   data: {\n *     source_metadata: {\n *       function_name: \"doAction\",\n *       nearest_function_name: \"doAction\",\n *       file_path: \"ReplicatedStorage.TS.actions\",\n *       line_number: 5\n *     }\n *   }\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sourceMetadataEnricher(entry: "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LogEntry",
              "canonicalReference": "@rbxts/rlog!LogEntry:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/enrichers/source-metadata-enricher.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entry",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "sourceMetadataEnricher"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!withLogContext:function(1)",
          "docComment": "/**\n * Wraps around a callback, automatically creating and managing the lifecycle for a {@link LogContext}.\n *\n * The callback will be invoked immediately, and within the same thread.\n *\n * Any errors thrown within the callback will be re-thrown after calling {@link LogContext.stop | stop} on the created context to avoid memory leaks.\n *\n * Any value returned from the callback will also be propagated appropriately.\n *\n * @param config - Optional config to create the context with.\n *\n * @param callback - {@link ContextCallback} scope to run and provide the context for.\n *\n * @example\n * ```ts\n * remotes.buyPet.connect((player: Player, pet: PetId) => {\n *   // automatically starts and stops the context\n *   withLogContext({ minLogLevel: LogLevel.DEBUG }, (context) => {\n *     buyPet(context, player.UserId, pet);\n *   });\n * });\n * ```\n *\n * @see\n *\n * {@link withLogContextAsync}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function withLogContext<R = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">(config: "
            },
            {
              "kind": "Reference",
              "text": "PartialRLogConfig",
              "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Reference",
              "text": "ContextCallback",
              "canonicalReference": "@rbxts/rlog!ContextCallback:type"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/util.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "withLogContext"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!withLogContext:function(2)",
          "docComment": "/**\n * Wraps around a callback, automatically creating and managing the lifecycle for a {@link LogContext}.\n *\n * The callback will be invoked immediately, and within the same thread.\n *\n * Any errors thrown within the callback will be re-thrown after calling {@link LogContext.stop | stop} on the created context to avoid memory leaks.\n *\n * Any value returned from the callback will also be propagated appropriately.\n *\n * @param callback - {@link ContextCallback} scope to run and provide the context for.\n *\n * @example\n * ```ts\n * remotes.buyPet.connect((player: Player, pet: PetId) => {\n *   // automatically starts and stops the context\n *   withLogContext((context) => {\n *     buyPet(context, player.UserId, pet);\n *   });\n * });\n * ```\n *\n * @see\n *\n * {@link withLogContextAsync}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function withLogContext<R = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">(callback: "
            },
            {
              "kind": "Reference",
              "text": "ContextCallback",
              "canonicalReference": "@rbxts/rlog!ContextCallback:type"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/util.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "withLogContext"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!withLogContextAsync:function(1)",
          "docComment": "/**\n * Wraps around an async callback, automatically creating and managing the lifecycle for a {@link LogContext}.\n *\n * Will call {@link LogContext.stop | stop} on the created context when the executed scope is finished- regardless if the promise was cancelled or threw an error.\n *\n * Any value returned from the callback will also be propagated appropriately.\n *\n * @param config - Optional config to create the context with.\n *\n * @param callback - {@link ContextCallback} scope to run and provide the context for.\n *\n * @example\n * ```ts\n * remotes.buyPet.onRequest((player: Player, pet: PetId) =>\n *   // automatically starts and stops the context\n *   withLogContextAsync({ minLogLevel: LogLevel.DEBUG }, async (context) => {\n *     return buyPet(context, player.UserId, pet);\n *   }),\n * );\n * ```\n *\n * @see\n *\n * {@link withLogContext}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function withLogContextAsync<R = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">(config: "
            },
            {
              "kind": "Reference",
              "text": "PartialRLogConfig",
              "canonicalReference": "@rbxts/rlog!PartialRLogConfig:type"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Reference",
              "text": "ContextCallback",
              "canonicalReference": "@rbxts/rlog!ContextCallback:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/util.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "withLogContextAsync"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rbxts/rlog!withLogContextAsync:function(2)",
          "docComment": "/**\n * Wraps around an async callback, automatically creating and managing the lifecycle for a {@link LogContext}.\n *\n * Will call {@link LogContext.stop | stop} on the created context when the executed scope is finished- regardless if the promise was cancelled or threw an error.\n *\n * Any value returned from the callback will also be propagated appropriately.\n *\n * @param callback - {@link ContextCallback} scope to run and provide the context for.\n *\n * @example\n * ```ts\n * remotes.buyPet.onRequest((player: Player, pet: PetId) =>\n *   // automatically starts and stops the context\n *   withLogContextAsync(async (context) => {\n *     return buyPet(context, player.UserId, pet);\n *   }),\n * );\n * ```\n *\n * @see\n *\n * {@link withLogContext}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function withLogContextAsync<R = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">(callback: "
            },
            {
              "kind": "Reference",
              "text": "ContextCallback",
              "canonicalReference": "@rbxts/rlog!ContextCallback:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/util.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "withLogContextAsync"
        }
      ]
    }
  ]
}
